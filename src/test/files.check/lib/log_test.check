#include "s21_tests.h"
#include <stdio.h>
#include <math.h>

#suite log
#test arb_pos
    double x = 15.L/13.L;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);
    

#test arb_neg
    double x = -15.L/13.L;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test integral_pos
    double x = 13;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test integral_neg
    double x = -13;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test zero_pos
    double x = 0.0;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_infinite(exp);
    ck_assert_double_infinite(res);
    ck_assert(exp == res);


#test zero_neg
    double x = 0.0;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_infinite(exp);
    ck_assert_double_infinite(res);
    ck_assert(exp == res);


#test plus_one
    double x = +1;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test minus_one
    double x = -1;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test not_a_number
    double x = NAN;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test pi_pos
    double x = S21_PI;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pi_2_pos
    double x = S21_PI/2;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pi_4_pos
    double x = S21_PI/4;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pi_3_pos
    double x = S21_PI/3;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pi_6_pos
    double x = S21_PI/3;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pos_2_pi
    double x = 2 * S21_PI;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pi_neg
    double x = -S21_PI;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test pi_2_neg
    double x = -S21_PI/2;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test pi_4_neg
    double x = -S21_PI/4;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test pi_3_neg
    double x = -S21_PI/3;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test pi_6_neg
    double x = -S21_PI/3;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test neg_2_pi
    double x = 2 * -S21_PI;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test big_integral_pi
    double x = 999 * 17 * S21_PI;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test big_pi
    double x = 999 * 17 * S21_PI / 11;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test int_max
    double x = INT_MAX;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test int_min
    double x = INT_MIN;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test flt_min
    double x = FLT_MIN;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test dbl_min
    double x = DBL_MIN;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test flt_max
    double x = FLT_MAX;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test dbl_max
    double x = DBL_MAX;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test double_10_6
    double x = 3322119978.169291;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test double_11_5
    double x = 33221199781.69291;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test double_12_4
    double x = 332211997816.9291;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test double_13_3
    double x = 3322119978169.291;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test double_14_2
    double x = 33221199781692.91;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test double_15_1
    double x = 332211997816929.1;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test double_16_0
    double x = 3322119978169291;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test double_16_0_max
    double x = 9999999999999999;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pos_inf
    double x = INFINITY;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_infinite(exp);
    ck_assert_double_infinite(res);
    ck_assert(exp == res);


#test neg_inf
    double x = -INFINITY;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test integral_large_pos
    double x = 810293646;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, 1e-6);


#test integral_large_neg
    double x = -810293646;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test arb_integer
    double x = 17;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, 1e-6);


#test double_one
    double x = 1.0L;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, 1e-6);


#test near_one_bigger
    double x = 1.0L + DBL_MIN;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, 1e-6);


#test near_one_smaller
    double x = 1.0L - DBL_MIN;
    
    double exp = log(x);
    double res = s21_log(x);
    
    ck_assert_double_eq_tol(exp, res, 1e-6);
