#include "s21_tests.h"
#include <stdio.h>
#include <math.h>

#suite fmod
#test PI
    double a = 99999 * M_PI;
    double b = 2 * M_PI;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);
    
    ck_assert_ldouble_eq_tol(exp, res, 10e-6);


#test arbitrary_pos_pos
    double a = 15.l/13.l;
    double b = 4.l/9.l;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);
    
    ck_assert_ldouble_eq(exp, res);


#test arbitrary_pos_neg
    double a = 15.l/13.l;
    double b = -4.l/9.l;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);
    
    ck_assert_ldouble_eq(exp, res);


#test arbitrary_neg_pos
    double a = -15.l/13.l;
    double b = 4.l/9.l;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);
    
    ck_assert_ldouble_eq(exp, res);


#test arbitrary_neg_neg
    double a = -15.l/13.l;
    double b = -4.l/9.l;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);
    
    ck_assert_ldouble_eq(exp, res);


#test arbitrary_pos_posinf
    double a = 15.l/13.l;
    double b = INFINITY;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);
    
    ck_assert_ldouble_eq(exp, res); 


#test arbitrary_neg_posinf
    double a = -15.l/13.l;
    double b = INFINITY;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);    


#test nan_posinf
    double a = NAN;
    double b = INFINITY;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test zero_posinf
    double a = 0;
    double b = INFINITY;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);


#test dblmax_posinf
    double a = DBL_MAX;
    double b = INFINITY;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);


#test dblmin_posinf
    double a = DBL_MIN;
    double b = INFINITY;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);


#test posinf_posinf
    double a = INFINITY;
    double b = INFINITY;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test neginf_posinf
    double a = -INFINITY;
    double b = INFINITY;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test arbitrary_pos_neginf
    double a = 15.l/13.l;
    double b = -INFINITY;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);
    
    ck_assert_ldouble_eq(exp, res); 


#test arbitrary_neg_neginf
    double a = -15.l/13.l;
    double b = -INFINITY;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);    


#test nan_neginf
    double a = NAN;
    double b = -INFINITY;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test zero_neginf
    double a = 0;
    double b = -INFINITY;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);


#test dblmax_neginf
    double a = DBL_MAX;
    double b = -INFINITY;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);


#test dblmin_neginf
    double a = DBL_MIN;
    double b = -INFINITY;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);


#test posinf_neginf
    double a = INFINITY;
    double b = -INFINITY;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test neginf_neginf
    double a = -INFINITY;
    double b = -INFINITY;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test arbitrary_pos_nan
    double a = 15.l/13.l;
    double b = NAN;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);
    
    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res); 


#test arbitrary_neg_nan
    double a = -15.l/13.l;
    double b = NAN;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test nan_nan
    double a = NAN;
    double b = NAN;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test zero_nan
    double a = 0;
    double b = NAN;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test dblmax_nan
    double a = DBL_MAX;
    double b = NAN;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test dblmin_nan
    double a = DBL_MIN;
    double b = NAN;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test posinf_nan
    double a = INFINITY;
    double b = NAN;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test arbitrary_pos_zero
    double a = 15.l/13.l;
    double b = 0;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);
    
    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res); 


#test arbitrary_neg_zero
    double a = -15.l/13.l;
    double b = 0;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);   


#test nan_zero
    double a = NAN;
    double b = 0;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test zero_zero
    double a = 0;
    double b = 0;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test dblmax_zero
    double a = DBL_MAX;
    double b = 0;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test dblmin_zero
    double a = DBL_MIN;
    double b = 0;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test posinf_zero
    double a = INFINITY;
    double b = 0;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test arbitrary_pos_arbitrary_pos
    double a = 15.l/13.l;
    double b = 7.l/3.l;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);
    
    ck_assert_ldouble_eq(exp, res); 


#test arbitrary_neg_arbitrary_pos
    double a = -15.l/13.l;
    double b = 7.l/3.l;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res); 


#test nan_arbitrary_pos
    double a = NAN;
    double b = 7.l/3.l;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test zero_arbitrary_pos
    double a = 7.l/3.l;
    double b = 7.l/3.l;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);


/* long double overflow
##test dblmax_arbitrary_pos
    double a = DBL_MAX;
    double b = 7.l/3.l+3;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);
*/

#test dblmin_arbitrary_pos
    double a = DBL_MIN;
    double b = 7.l/3.l;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);


#test posinf_arbitrary_pos
    double a = INFINITY;
    double b = 7.l/3.l;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test arbitrary_neg_arbitrary_neg
    double a = -15.l/13.l;
    double b = -7.l/3.l;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res); 


#test nan_arbitrary_neg
    double a = NAN;
    double b = -7.l/3.l;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test zero_arbitrary_neg
    double a = -7.l/3.l;
    double b = -7.l/3.l;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);


/* long double overflow
##test dblmax_arbitrary_neg
    double a = DBL_MAX;
    double b = -7.l/3.l;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);
*/


#test dblmin_arbitrary_neg
    double a = DBL_MIN;
    double b = -7.l/3.l;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);


#test posinf_arbitrary_neg
    double a = INFINITY;
    double b = -7.l/3.l;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test arbitrary_neg_dblmin
    double a = -15.l/13.l;
    double b = DBL_MIN;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res); 


#test nan_dblmin
    double a = NAN;
    double b = DBL_MIN;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test zero_dblmin
    double a = 0;
    double b = DBL_MIN;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);


#test dblmax_dblmin
    double a = DBL_MAX;
    double b = DBL_MIN;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);


#test dblmin_dblmin
    double a = DBL_MIN;
    double b = DBL_MIN;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);


#test posinf_dblmin
    double a = INFINITY;
    double b = DBL_MIN;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test arbitrary_neg_dblmax
    double a = -15.l/13.l;
    double b = DBL_MAX;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res); 


#test nan_dblmax
    double a = NAN;
    double b = DBL_MAX;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test zero_dblmax
    double a = 0;
    double b = DBL_MAX;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);


#test dblmax_dblmax
    double a = DBL_MAX;
    double b = DBL_MAX;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_eq(exp, res);


#test posinf_dblmax
    double a = INFINITY;
    double b = DBL_MAX;
    
    long double exp = fmod(a, b);
    long double res = s21_fmod(a, b);

    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);
