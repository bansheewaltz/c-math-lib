#include "s21_tests.h"

#suite expected
#test arbitrary
    int x = 17;

    long double expected = exp(x);
    long double res = s21_exp(x);
    ck_assert_int_eq(expected, res);

#test float_test
    float x = 1.5;

    long double expected = exp(x);
    long double res = s21_exp(x);
    ck_assert_int_eq(expected, res);  

#test float2_test
    float x = 0.000005;

    long double expected = exp(x);
    long double res = s21_exp(x);
    ck_assert_int_eq(expected, res);    


#test zero_test
    int x = 0;

    long double expected = exp(x);
    long double res = s21_exp(x);
    ck_assert_int_eq(expected, res);

#test negative_zero
    int x = -0;

    long double expected = exp(x);
    long double res = s21_exp(x);
    ck_assert_int_eq(expected, res);   

#test NAN_test
    float x = NAN;

    long double expected = exp(x);
    long double res = s21_exp(x);
    ck_assert_int_eq(expected, res);


#test text
    char x = 'x'; 
    
    long double expected = exp(x);
    long double res = s21_exp(x);
    ck_assert_int_eq(expected, res);



#test max_int
    int x = INT_MAX - 1; 
    
    long double expected = exp(x);
    long double res = s21_exp(x);
    ck_assert_int_eq(expected, res);


#test negative_value
    int x = -17;

    long double expected = exp(x);
    long double res = s21_exp(x);
    ck_assert_int_eq(expected, res);



#test-loop(0, 96) iteration
    int step = INT_MAX / 100 * 2;
    int x = INT_MIN + _i * step;
    
    long double expected = exp(x);
    long double res = s21_exp(x);
    ck_assert_int_eq(expected, res);
