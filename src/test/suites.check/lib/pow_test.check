#include "s21_tests.h"

#suite pow
#test integral_arb_pos__integral_same
    double base = 17;
    double exp = base; 

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__square
    double base = 17;
    double exp = 2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__one
    double base = 17;
    double exp = 1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__zero
    double base = 17;
    double exp = 0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__cube
    double base = 17;
    double exp = 3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__minus_one
    double base = 17;
    double exp = -1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__minus_square
    double base = 17;
    double exp = -2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__minus_cube
    double base = 17;
    double exp = -3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__nan
    double base = 17;
    double exp = NAN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test integral_arb_pos__inf_pos
    double base = 17;
    double exp = INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test integral_arb_pos__inf_neg
    double base = 17;
    double exp = -INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__dbl_max
    double base = 17;
    double exp = DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test integral_arb_pos__dbl_min
    double base = 17;
    double exp = DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__double_arb_pos
    double base = 17;
    double exp = 13.217;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__double_arb_pos_ltone
    double base = 17;
    double exp = 0.217;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__one_third
    double base = 17;
    double exp = (double)1/3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__three_seventh
    double base = 17;
    double exp = (double)3/7;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__double_arb_pos_ltone_neg
    double base = 17;
    double exp = -0.217;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__one_third_neg
    double base = 17;
    double exp = -(double)1/3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__three_seventh_neg
    double base = 17;
    double exp = -(double)3/7;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__double_arb_neg
    double base = 17;
    double exp = -13.217;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__integral_large_pos
    double base = 17;
    double exp = 177;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__integral_std_pos
    double base = 17;
    double exp = 7;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__integral_std_neg
    double base = 17;
    double exp = -7;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__integral_large_neg
    double base = 17;
    double exp = -177;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_pos__int_max
    double base = 17;
    double exp = INT_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test integral_arb_pos__int_min
    double base = 17;
    double exp = INT_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_neg__integral_same
    double base = -17;
    double exp = base; 

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_neg__square
    double base = -17;
    double exp = 2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_neg__one
    double base = -17;
    double exp = 1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_neg__zero
    double base = -17;
    double exp = 0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_neg__cube
    double base = -17;
    double exp = 3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_neg__minus_one
    double base = -17;
    double exp = -1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_neg__minus_square
    double base = -17;
    double exp = -2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_neg__minus_cube
    double base = -17;
    double exp = -3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_neg__nan
    double base = -17;
    double exp = NAN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test integral_arb_neg__inf_pos
    double base = -17;
    double exp = INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test integral_arb_neg__inf_neg
    double base = -17;
    double exp = -INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_neg__dbl_max
    double base = -17;
    double exp = DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test integral_arb_neg__dbl_min
    double base = -17;
    double exp = DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test integral_arb_neg__double_arb_pos
    double base = -17;
    double exp = 13.217;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test integral_arb_neg__double_arb_neg
    double base = -17;
    double exp = -13.217;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test integral_arb_neg__integral_large_pos
    double base = -17;
    double exp = -177;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_neg__integral_large_neg
    double base = -17;
    double exp = -177;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_neg__int_max
    double base = -17;
    double exp = INT_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test integral_arb_neg__int_min
    double base = -17;
    double exp = INT_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_arb_neg__double_arb_pos_gtone
    double base = -17;
    double exp = 4.1234;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test integral_arb_neg__double_arb_neg_gtone
    double base = -17;
    double exp = -4.1234;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test integral_arb_neg__double_arb_neg_ltone
    double base = -17;
    double exp = -0.1234;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test integral_arb_neg__double_arb_pos_ltone
    double base = -17;
    double exp = 0.1234;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test integral_large__integral_same
    double base = 753;
    double exp = base; 

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test integral_large__square
    double base = 753;
    double exp = 2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_large__one
    double base = 753;
    double exp = 1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_large__zero
    double base = 753;
    double exp = 0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_large__cube
    double base = 753;
    double exp = 0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_large__minus_one
    double base = 753;
    double exp = -1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_large__minus_square
    double base = 753;
    double exp = -2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_large__minus_cube
    double base = 753;
    double exp = -3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_large__nan
    double base = 753;
    double exp = NAN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test integral_large__inf_pos
    double base = 753;
    double exp = INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test integral_large__inf_neg
    double base = 753;
    double exp = -INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_large__dbl_max
    double base = 753;
    double exp = DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test integral_large__dbl_min
    double base = 753;
    double exp = DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_large__integral_large
    double base = 753;
    double exp = 777;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test integral_small__integral_same
    double base = 7;
    double exp = base; 

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_small__square
    double base = 7;
    double exp = 2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_small__one
    double base = 7;
    double exp = 1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_small__zero
    double base = 7;
    double exp = 0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_small__cube
    double base = 7;
    double exp = 0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_small__minus_one
    double base = 7;
    double exp = -1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_small__minus_square
    double base = 7;
    double exp = -2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_small__minus_cube
    double base = 7;
    double exp = -3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_small__nan
    double base = 7;
    double exp = NAN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test integral_small__inf_pos
    double base = 7;
    double exp = INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test integral_small__inf_neg
    double base = 7;
    double exp = -INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_small__dbl_max
    double base = 7;
    double exp = DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test integral_small__dbl_min
    double base = 7;
    double exp = DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test integral_small__integral_small
    double base = 7;
    double exp = 777;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test dbl_max__integral_same
    double base = DBL_MAX;
    double exp = base; 

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test dbl_max__square
    double base = DBL_MAX;
    double exp = 2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test dbl_max__one
    double base = DBL_MAX;
    double exp = 1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test dbl_max__zero
    double base = DBL_MAX;
    double exp = 0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test dbl_max__cube
    double base = DBL_MAX;
    double exp = 3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test dbl_max__minus_one
    double base = DBL_MAX;
    double exp = -1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test dbl_max__minus_square
    double base = DBL_MAX;
    double exp = -2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test dbl_max__minus_cube
    double base = DBL_MAX;
    double exp = -3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test dbl_max__nan
    double base = DBL_MAX;
    double exp = NAN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test dbl_max__inf_pos
    double base = DBL_MAX;
    double exp = INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test dbl_max__inf_neg
    double base = DBL_MAX;
    double exp = -INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test dbl_max__dbl_max
    double base = DBL_MAX;
    double exp = DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test dbl_max__dbl_min
    double base = DBL_MAX;
    double exp = DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test dbl_min__integral_same
    double base = DBL_MIN;
    double exp = base; 

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test dbl_min__square
    double base = DBL_MIN;
    double exp = 2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test dbl_min__one
    double base = DBL_MIN;
    double exp = 1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test dbl_min__zero
    double base = DBL_MIN;
    double exp = 0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test dbl_min__cube
    double base = DBL_MIN;
    double exp = 3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test dbl_min__minus_one
    double base = DBL_MIN;
    double exp = -1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test dbl_min__minus_square
    double base = DBL_MIN;
    double exp = -2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test dbl_min__minus_cube
    double base = DBL_MIN;
    double exp = -3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test dbl_min__nan
    double base = DBL_MIN;
    double exp = NAN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test dbl_min__inf_pos
    double base = DBL_MIN;
    double exp = INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test dbl_min__inf_neg
    double base = DBL_MIN;
    double exp = -INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test dbl_min__dbl_min
    double base = DBL_MIN;
    double exp = DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test nan__same
    double base = NAN;
    double exp = base; 

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__square
    double base = NAN;
    double exp = 2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__one
    double base = NAN;
    double exp = 1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__zero
    double base = NAN;
    double exp = 0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test nan__cube
    double base = NAN;
    double exp = 3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__minus_one
    double base = NAN;
    double exp = -1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__minus_square
    double base = NAN;
    double exp = -2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__minus_cube
    double base = NAN;
    double exp = -3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__nan
    double base = NAN;
    double exp = NAN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__inf_pos
    double base = NAN;
    double exp = INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__inf_neg
    double base = NAN;
    double exp = -INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__dbl_min_pos
    double base = NAN;
    double exp = DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__dbl_min_neg
    double base = NAN;
    double exp = -DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__dbl_max_pos
    double base = NAN;
    double exp = DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__dbl_max_neg
    double base = NAN;
    double exp = -DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__double_arb_pos_gthone
    double base = NAN;
    double exp = 11.941;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__double_arb_gthone_neg
    double base = NAN;
    double exp = -11.941;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__double_arb_lthone_pos
    double base = NAN;
    double exp = 0.941;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test nan__double_arb_lthone_neg
    double base = NAN;
    double exp = -0.941;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test inf_pos__integral_same
    double base = INFINITY;
    double exp = base; 

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_pos__square
    double base = INFINITY;
    double exp = 2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_pos__one
    double base = INFINITY;
    double exp = 1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_pos__zero
    double base = INFINITY;
    double exp = 0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test inf_pos__cube
    double base = INFINITY;
    double exp = 3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_pos__minus_one
    double base = INFINITY;
    double exp = -1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test inf_pos__minus_square
    double base = INFINITY;
    double exp = -2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test inf_pos__minus_cube
    double base = INFINITY;
    double exp = -3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test inf_pos__inf_pos
    double base = INFINITY;
    double exp = INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_pos__inf_neg
    double base = INFINITY;
    double exp = -INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test inf_pos__dbl_min
    double base = INFINITY;
    double exp = DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_pos__dbl_max
    double base = INFINITY;
    double exp = DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_pos__integral_arb_pos
    double base = INFINITY;
    double exp = 17.0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_pos__nan
    double base = INFINITY;
    double exp = NAN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test inf_pos__integral_arb_neg
    double base = INFINITY;
    double exp = -17.0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_pos__double_arb_pos_gthone
    double base = INFINITY;
    double exp = 11.941;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_pos__double_arb_gthone_neg
    double base = INFINITY;
    double exp = -11.941;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test inf_pos__double_arb_lthone_pos
    double base = INFINITY;
    double exp = 0.941;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_pos__double_arb_lthone_neg
    double base = INFINITY;
    double exp = -0.941;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_neg__integral_same
    double base = -INFINITY;
    double exp = base; 

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test inf_neg__square
    double base = -INFINITY;
    double exp = 2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_neg__one
    double base = -INFINITY;
    double exp = 1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_neg__zero
    double base = -INFINITY;
    double exp = 0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test inf_neg__cube
    double base = -INFINITY;
    double exp = 3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_neg__minus_one
    double base = -INFINITY;
    double exp = -1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test inf_neg__minus_square
    double base = -INFINITY;
    double exp = -2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test inf_neg__minus_cube
    double base = -INFINITY;
    double exp = -3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test inf_neg__inf_neg
    double base = -INFINITY;
    double exp = -INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test inf_neg__inf_pos
    double base = -INFINITY;
    double exp = INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_neg__dbl_min
    double base = -INFINITY;
    double exp = DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_neg__dbl_max
    double base = -INFINITY;
    double exp = DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_neg__nan
    double base = -INFINITY;
    double exp = NAN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test inf_neg__double_arb_pos
    double base = -INFINITY;
    double exp = 11.23413;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_neg__double_arb_neg
    double base = -INFINITY;
    double exp = -11.23413;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test inf_neg__double_arb_pos_gthone
    double base = -INFINITY;
    double exp = 11.941;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_neg__double_arb_gthone_neg
    double base = -INFINITY;
    double exp = -11.941;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test inf_neg__double_arb_lthone_pos
    double base = -INFINITY;
    double exp = 0.941;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test inf_neg__double_arb_lthone_neg
    double base = -INFINITY;
    double exp = -0.941;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_pos__integral_same
    double base = 17.0 / 7.0;
    double exp = base; 

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_pos__square
    double base = 17.0 / 7.0;
    double exp = 2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_pos__one
    double base = 17.0 / 7.0;
    double exp = 1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_pos__zero
    double base = 17.0 / 7.0;
    double exp = 0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_pos__cube
    double base = 17.0 / 7.0;
    double exp = 3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_pos__minus_one
    double base = 17.0 / 7.0;
    double exp = -1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_pos__minus_square
    double base = 17.0 / 7.0;
    double exp = -2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_pos__minus_cube
    double base = 17.0 / 7.0;
    double exp = -3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_pos__double_arb_pos
    double base = 17.0 / 7.0;
    double exp = 17.0 / 7.0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_pos__dbl_min
    double base = 17.0 / 7.0;
    double exp = DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_pos__dbl_max
    double base = 17.0 / 7.0;
    double exp = DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test double_arb_pos__nan
    double base = 17.0 / 7.0;
    double exp = NAN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test double_arb_pos__inf_pos
    double base = 17.0 / 7.0;
    double exp = INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test double_arb_pos__inf_neg
    double base = 17.0 / 7.0;
    double exp = -INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_pos__int_arb_pos
    double base = 17.0 / 7.0;
    double exp = 17;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_pos__int_arb_neg
    double base = 17.0 / 7.0;
    double exp = -17;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_pos__int_max
    double base = 17.0 / 7.0;
    double exp = INT_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test double_arb_pos__int_min
    double base = 17.0 / 7.0;
    double exp = INT_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_pos__int_large_pos
    double base = 17.0 / 7.0;
    double exp = 177;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_pos__int_large_neg
    double base = 17.0 / 7.0;
    double exp = -177;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_neg__integral_same
    double base = -17.0 / 7.0;
    double exp = base; 

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test double_arb_neg__square
    double base = -17.0 / 7.0;
    double exp = 2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_neg__one
    double base = -17.0 / 7.0;
    double exp = 1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_neg__zero
    double base = -17.0 / 7.0;
    double exp = 0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_neg__cube
    double base = -17.0 / 7.0;
    double exp = 3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_neg__minus_one
    double base = -17.0 / 7.0;
    double exp = -1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_neg__minus_square
    double base = -17.0 / 7.0;
    double exp = -2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_neg__minus_cube
    double base = -17.0 / 7.0;
    double exp = -3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_neg__double_arb_neg
    double base = -17.0 / 7.0;
    double exp = -17.0 / 7.0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test double_arb_neg__dbl_min
    double base = -17.0 / 7.0;
    double exp = DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test double_arb_neg__dbl_max
    double base = -17.0 / 7.0;
    double exp = DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test double_arb_neg__nan
    double base = -17.0 / 7.0;
    double exp = NAN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test double_arb_neg__inf_pos
    double base = -17.0 / 7.0;
    double exp = INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test double_arb_neg__inf_neg
    double base = -17.0 / 7.0;
    double exp = -INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_neg__int_arb_pos
    double base = -17.0 / 7.0;
    double exp = 17;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_neg__int_arb_neg
    double base = -17.0 / 7.0;
    double exp = -17;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_neg__int_max
    double base = -17.0 / 7.0;
    double exp = INT_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test double_arb_neg__int_min
    double base = -17.0 / 7.0;
    double exp = INT_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_neg__int_large_pos
    double base = -17.0 / 7.0;
    double exp = 177;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test double_arb_neg__int_large_neg
    double base = -17.0 / 7.0;
    double exp = -177;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_pos__same
    double base = 0.0;
    double exp = base; 

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_pos__square
    double base = 0.0;
    double exp = 2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_pos__one
    double base = 0.0;
    double exp = 1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_pos__zero_pos
    double base = 0.0;
    double exp = 0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_pos__cube
    double base = 0.0;
    double exp = 3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_pos__minus_one
    double base = 0.0;
    double exp = -1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_infinite(expected);
    ck_assert_double_infinite(res);


#test zero_pos__minus_square
    double base = 0.0;
    double exp = -2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test zero_pos__minus_cube
    double base = 0.0;
    double exp = -3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test zero_pos__dbl_min_pos
    double base = 0.0;
    double exp = DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_pos__dbl_min_neg
    double base = 0.0;
    double exp = -DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test zero_pos__dbl_max_pos
    double base = 0.0;
    double exp = DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_pos__dbl_max_neg
    double base = 0.0;
    double exp = -DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test zero_pos__inf_pos
    double base = 0.0;
    double exp = INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_pos__inf_neg
    double base = 0.0;
    double exp = -INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test zero_pos__int_max
    double base = 0.0;
    double exp = INT_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_pos__int_min
    double base = 0.0;
    double exp = INT_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test zero_pos__double_arb_pos
    double base = 0.0;
    double exp = 13.125;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_pos__double_arb_neg
    double base = 0.0;
    double exp = -13.125;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test zero_pos__zero_neg
    double base = +0.0;
    double exp = -0.0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_pos__nan
    double base = +0.0;
    double exp = NAN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test zero_neg__same
    double base = -0.0;
    double exp = base; 

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_neg__square
    double base = -0.0;
    double exp = 2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_neg__one
    double base = -0.0;
    double exp = 1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_neg__zero_neg
    double base = -0.0;
    double exp = 0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_neg__cube
    double base = -0.0;
    double exp = 3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_neg__minus_one
    double base = -0.0;
    double exp = -1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test zero_neg__minus_square
    double base = -0.0;
    double exp = -2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test zero_neg__minus_cube
    double base = -0.0;
    double exp = -3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test zero_neg__dbl_min_pos
    double base = -0.0;
    double exp = DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_neg__dbl_min_neg
    double base = -0.0;
    double exp = -DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test zero_neg__dbl_max_pos
    double base = -0.0;
    double exp = DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_neg__dbl_max_neg
    double base = -0.0;
    double exp = -DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test zero_neg__inf_pos
    double base = -0.0;
    double exp = INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_neg__inf_neg
    double base = -0.0;
    double exp = -INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test zero_neg__int_max
    double base = -0.0;
    double exp = INT_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_neg__int_min
    double base = -0.0;
    double exp = INT_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test zero_neg__double_arb_pos
    double base = -0.0;
    double exp = 13.125;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_neg__double_arb_neg
    double base = -0.0;
    double exp = -13.125;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq(expected, res);


#test zero_neg__zero_pos
    double base = -0.0;
    double exp = +0.0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test zero_neg__nan
    double base = -0.0;
    double exp = NAN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test one__integral_same
    double base = 1.0;
    double exp = base; 

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__square
    double base = 1.0;
    double exp = 2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__one
    double base = 1.0;
    double exp = 1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__cube
    double base = 1.0;
    double exp = 3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__minus_one
    double base = 1.0;
    double exp = -1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__minus_square
    double base = 1.0;
    double exp = -2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__minus_cube
    double base = 1.0;
    double exp = -3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__dbl_min_pos
    double base = 1.0;
    double exp = DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__dbl_min_neg
    double base = 1.0;
    double exp = -DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__dbl_max_pos
    double base = 1.0;
    double exp = DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__dbl_max_neg
    double base = 1.0;
    double exp = -DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__inf_pos
    double base = 1.0;
    double exp = INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__inf_neg
    double base = 1.0;
    double exp = -INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__int_max
    double base = 1.0;
    double exp = INT_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__int_min
    double base = 1.0;
    double exp = INT_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__double_arb_pos_gtone
    double base = 1.0;
    double exp = 21.312;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__double_arb_neg_gtone
    double base = 1.0;
    double exp = -21.312;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__double_arb_pos_ltone
    double base = 1.0;
    double exp = 0.312;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test one__double_arb_neg_ltone
    double base = 1.0;
    double exp = -0.312;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test minus_one_integral_same
    double base = -1.0;
    double exp = base; 

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test minus_one_square
    double base = -1.0;
    double exp = 2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test minus_one_one
    double base = -1.0;
    double exp = 1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test minus_one_cube
    double base = -1.0;
    double exp = 3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test minus_one_minus_one
    double base = -1.0;
    double exp = -1;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test minus_one_minus_square
    double base = -1.0;
    double exp = -2;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test minus_one_minus_cube
    double base = -1.0;
    double exp = -3;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test minus_one_dbl_min_pos
    double base = -1.0;
    double exp = DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test minus_one_dbl_min_neg
    double base = -1.0;
    double exp = -DBL_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test minus_one_dbl_max_pos
    double base = -1.0;
    double exp = DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test minus_one_dbl_max_neg
    double base = -1.0;
    double exp = -DBL_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test minus_one_inf_pos
    double base = -1.0;
    double exp = INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test minus_one_inf_neg
    double base = -1.0;
    double exp = -INFINITY;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test minus_one_int_max
    double base = -1.0;
    double exp = INT_MAX;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test minus_one_int_min
    double base = -1.0;
    double exp = INT_MIN;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);


#test minus_one_double_arb_pos_gtone
    double base = -1.0;
    double exp = 21.312;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test minus_one_double_arb_neg_gtone
    double base = -1.0;
    double exp = -21.312;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test minus_one_double_arb_pos_ltone
    double base = -1.0;
    double exp = 0.312;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test minus_one_double_arb_neg_ltone
    double base = -1.0;
    double exp = -0.312;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_ldouble_nan(expected);
    ck_assert_ldouble_nan(res);


#test minus_0_5__2
    double base = -0.5;
    double exp = 2.0;

    double expected = pow(base, exp);
    double res = (double)s21_pow(base, exp);
    
    ck_assert_double_eq_tol(expected, res, 1e-6);
