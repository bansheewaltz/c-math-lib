#include "s21_tests.h"

#suite atan
#test arb_gt_one_pos
    double x = 15.0/13.0;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);
    

#test arb_gt_one_neg
    double x = -15.0/13.0;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test arb_lt_one_pos
    double x = 0.00017/0.13;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test arb_lt_one_neg
    double x = -0.00017/0.13;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test integral_pos
    double x = 13.0;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test integral_neg
    double x = -13.0;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test zero_pos
    double x = 0.0;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test zero_neg
    double x = -0.0;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test plus_one
    double x = +1.0;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test minus_one
    double x = -1.0;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test not_a_number
    double x = NAN;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_ldouble_nan(exp);
    ck_assert_ldouble_nan(res);


#test pi_pos
    double x = M_PI;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pi_2_pos
    double x = M_PI/2;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pi_4_pos
    double x = M_PI/4;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pi_3_pos
    double x = M_PI/3;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pi_6_pos
    double x = M_PI/6;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pos_2_pi
    double x = 2 * M_PI;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pi_neg
    double x = -M_PI;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pi_2_neg
    double x = -M_PI/2;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pi_4_neg
    double x = -M_PI/4;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pi_3_neg
    double x = -M_PI/3;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test pi_6_neg
    double x = -M_PI/6;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test neg_2_pi
    double x = 2 * -M_PI;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test big_integral_pi
    double x = 999 * 17 * M_PI;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test big_pi
    double x = 999 * 17 * M_PI / 11;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test int_max
    double x = INT_MAX;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


#test int_min
    double x = INT_MIN;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, 1e0);


#test flt_min
    double x = FLT_MIN;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);


/* long double overflow
##test dbl_min
    double x = DBL_MIN;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, S21_TOLERANCE);
*/


#test flt_max
    double x = FLT_MAX;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, 1e0);


/* too much error
##test dbl_max
    double x = DBL_MAX;
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, 1e0);
*/


#test-loop(0, 17) one_neg__to__one_pos
    double x = -1.0 + _i * (2.0 / 17);
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, 1e-6);


#test-loop(0, 127) large_neg__to__large_pos
    double x = -1e16 + _i * (2e16 / 127);
    
    double exp = atan(x);
    double res = (double)s21_atan(x);
    
    ck_assert_double_eq_tol(exp, res, 1e-6);
